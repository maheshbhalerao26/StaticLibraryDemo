// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import Connect;
@import CoreData;
@import CoreLocation;
@import CoreMotion;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import RealmSwift;
@import UIKit;
@import WebKit;
@import iPassCore;
#endif

#import <iPassSmartConnect/iPassSmartConnect.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="iPassSmartConnect",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, ActivationErrorCodes, closed) {
/// We received an invaild job resources. Possible causees are invalid token
/// or credentials.
  ActivationErrorCodesInvalidJobResource = 100,
/// Token is not valid.
  ActivationErrorCodesInvalidToken = 101,
/// The profile that we got is not meant for this platform
  ActivationErrorCodesInvalidPlatformProfile = 102,
/// The profile id is not valid
  ActivationErrorCodesInvalidProfileId = 103,
/// Failed to load profile
  ActivationErrorCodesProfileLoadFailed = 104,
/// The activation data for this equest is not valid.
  ActivationErrorCodesInvalidActivationData = 105,
/// Invalid URL request
  ActivationErrorCodesInvalidURLRequest = 106,
/// Invalid Activation Response
  ActivationErrorCodesInvalidActivationResponse = 107,
/// Failed to decrypt activation data using the key supplied. Applicable only
/// in case of wizard based activations.
  ActivationErrorCodesDecryptionFailed = 108,
  ActivationErrorCodesVoucherUserSuspended = 201,
  ActivationErrorCodesVoucherSdkKeyInvalid = 202,
  ActivationErrorCodesVoucherSdkKeyNull = 203,
  ActivationErrorCodesVoucherSetupUnavailable = 204,
  ActivationErrorCodesVoucherInvalid = 205,
  ActivationErrorCodesVoucherExpired = 206,
  ActivationErrorCodesVoucherSuspended = 207,
  ActivationErrorCodesVoucherUserEmailInUse = 208,
  ActivationErrorCodesVoucherUserRegistrationFailure = 209,
  ActivationErrorCodesVoucherEmpty = 210,
  ActivationErrorCodesVoucherRedeemFailed = 211,
};

/// SMCAuthChallengeDisposition
typedef SWIFT_ENUM_NAMED(NSInteger, SMCAuthChallengeDisposition, "AuthChallengeDisposition", closed) {
  SMCAuthChallengeDispositionUseCredentials = 0,
  SMCAuthChallengeDispositionPerformDefault = 1,
  SMCAuthChallengeDispositionCancel = 2,
};







typedef SWIFT_ENUM_NAMED(NSInteger, CaptchaTheme, "CaptchaTheme", closed) {
  CaptchaThemeLight = 0,
  CaptchaThemeDark = 1,
};

@class NSCoder;

SWIFT_CLASS_NAMED("CaptchaViewController")
@interface CaptchaViewController : UIViewController
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17iPassSmartConnect19CellularNetworkInfo")
@interface CellularNetworkInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class SMCConnectionStatus;
enum SMCUIRequiredReason : NSInteger;
enum SMCUIRequiredResponse : NSInteger;
@class SMCCredentials;
enum SMCNotifyUserReason : NSInteger;
@class SMCNetwork;
@class SMCCaptchaViewController;

SWIFT_PROTOCOL_NAMED("ConnectionDelegate") SWIFT_AVAILABILITY(ios,introduced=9.0)
@protocol ConnectionDelegate
/// Gets called when SMC starts a new connection. This gives the opportunity to the caller to update the UI with the connection started information.
/// @param connectionStatus SMCConnectionStatus object of the current connection. SMCConnectionStatus object passed has more information about the connection details.
/// @return None
- (void)connectionStarted:(SMCConnectionStatus * _Nonnull)connectionStatus;
/// Gets called when SMC have aborted a connection request. This gives the opportunity to the caller to update the UI with the connection aborted information. SMCConnectionStatus object passed has more information about the connection details.
/// @param connectionStatus SMCConnectionStatus object of the current connection.
/// @return None
- (void)connectionAborted:(SMCConnectionStatus * _Nonnull)connectionStatus;
/// Gets called when SMC have succesfully connected to a network. This gives the opportunity to the caller to update the UI with the connection success information. SMCConnectionStatus object passed has more information about the connection details.
/// @param connectionStatus SMCConnectionStatus object of the current connection.
/// @return None
- (void)connectionSuccess:(SMCConnectionStatus * _Nonnull)connectionStatus;
/// Gets called when SMC have failed to connect to a network.
/// This gives the opportunity to the caller to update the UI with the connection failed information.
/// @param connectionStatus SMCConnectionStatus object of the current connection.
/// @return None
- (void)connectionFailed:(SMCConnectionStatus * _Nonnull)connectionStatus;
/// Gets called when SMC needs UI to be launched in foreground for connection or requires User consent to carry forward.
/// @param uiRequiredReason : SMCUIRequiredReason value determining how to process the delegate call.
/// @param userResponseCompletionHandler : UserConsentCompletionHandler completion handler passing value whether the user has accepted or denied the request.
/// @return None
- (void)connectionRequiresUI:(enum SMCUIRequiredReason)reason completionHandler:(void (^ _Nullable)(enum SMCUIRequiredResponse, SMCCredentials * _Nullable))completionHandler;
@optional
/// Gets called when SMC is about to launch the captcha view controller
/// as part of the captcha authentication. This gives the opportunity to the caller
/// to customize the title, navigation bar colors etc if they need to.
/// @param viewController CaptchaViewController object that is going to be displayed.
/// @return None
- (void)willPresentCaptcha:(CaptchaViewController * _Nonnull)viewController;
/// Gets called when SMC is about to launch the captcha view controller
/// as part of the captcha authentication. This gives the opportunity to the caller
/// to provide the View controller over which to display the captcha view.
/// @param forCaptcha completionHandler : Pass the UIViewController instance over which the SMC will need to display the Captcha View.
/// @return None
- (void)requiredViewControllerForCaptcha:(void (^ _Nonnull)(UIViewController * _Nonnull))completionHandler;
/// Gets called when SMC is trying to connect to Inflight networks and network
/// availability is currently not present. Will notify user based on inavailability
/// of network connectivity or inflight entertainment being available.
/// @param notifyReason : SMCNotifyUserReason value determining the current inflight network status.
/// @return None
- (void)notifyUser:(enum SMCNotifyUserReason)notifyReason;
- (void)serviceCheckDidStart:(SMCConnectionStatus * _Nonnull)connectionStatus;
- (void)serviceCheckDidFinish:(SMCConnectionStatus * _Nonnull)connectionStatus;
/// Gets called when SMC starts logging out from the current network
/// @param connectionStatus SMCConnectionStatus object of the current connection.
/// @return None
- (void)connectionLoggingOff:(SMCConnectionStatus * _Nonnull)connectionStatus;
/// Gets called when SMC has successfully logged from the current network.
/// @param connectionStatus SMCConnectionStatus object of the current connection.
/// @return None
- (void)connectionLoggedOff:(SMCConnectionStatus * _Nonnull)connectionStatus;
/// Gets called when SMC has successfully logged from the current network.
/// @param connectionStatus SMCConnectionStatus object of the current connection.
/// @return None
- (void)connectionLoggedOffFailed:(SMCConnectionStatus * _Nonnull)connectionStatus;
/// Gets called when SMC reachibility check for the network starts
/// @param connectionStatus SMCConnectionStatus object of the current connection.
/// @return None
- (void)reachabilityCheckDidStart:(SMCConnectionStatus * _Nonnull)connectionStatus;
/// Gets called when SMC reachibility check for the network finishes
/// @param connectionStatus SMCConnectionStatus object of the current connection.
/// @return None
- (void)reachabilityCheckDidFinish:(SMCConnectionStatus * _Nonnull)connectionStatus;
/// Gets called when Host Application want to provide custom credentials to connect to a particular network
/// @param network SMCNetwork object of the currently associated network.
/// @param useCredentialsCompletionHandler ShouldUseCredentialsCompletionHandler completion handler passing value whether the user wants to pass its own credentials for connection and also the user credentials.
/// @return None
- (void)needCredentialsWithNetwork:(SMCNetwork * _Nonnull)network handler:(SWIFT_NOESCAPE void (^ _Nonnull)(enum SMCAuthChallengeDisposition, SMCCredentials * _Nonnull))handler;
- (void)willDisplayCaptcha:(SMCCaptchaViewController * _Nonnull)viewController;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ConnectionErrorCode, "ConnectionErrorCode", closed) {
  ConnectionErrorCodeLoginFailed = 100,
  ConnectionErrorCodeInternalGatewayError = 101,
  ConnectionErrorCodeServerTimeout = 102,
  ConnectionErrorCodeServerDisabled = 103,
  ConnectionErrorCodeUnexpectedResponse = 104,
  ConnectionErrorCodeLogoffFailed = 105,
  ConnectionErrorCodeAborted = 106,
  ConnectionErrorCodeHttpTimeout = 107,
  ConnectionErrorCodeInsufficientTime = 108,
  ConnectionErrorCodeUnknownError = 109,
  ConnectionErrorCodeInflightLoginFailed = 110,
};

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("ConnectionHistory")
@interface ConnectionHistory : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



typedef SWIFT_ENUM_NAMED(NSInteger, ConnectionState, "ConnectionState", closed) {
  ConnectionStateReady = 0,
  ConnectionStateNetworkDiscovery = 1,
  ConnectionStatePreAmion = 2,
  ConnectionStatePreProcess = 3,
  ConnectionStateServiceCheck = 4,
  ConnectionStatePostProcess = 5,
  ConnectionStateWaitingUser = 6,
  ConnectionStateValidateUser = 7,
  ConnectionStateLoggingIn = 8,
  ConnectionStateLoggingOff = 9,
  ConnectionStateLoggedOff = 10,
  ConnectionStateSuccess = 11,
  ConnectionStateFailed = 12,
  ConnectionStateAborted = 13,
};


SWIFT_PROTOCOL("_TtP17iPassSmartConnect19CoreLocationService_") SWIFT_AVAILABILITY(ios,introduced=9.0)
@protocol CoreLocationService
@property (nonatomic, readonly, strong) CLLocation * _Nullable currentLocation;
@property (nonatomic, readonly) BOOL locationServicesEnabled;
@property (nonatomic, readonly, copy) NSString * _Nullable currentLocationCoordinates;
@property (nonatomic, readonly, copy) NSString * _Nonnull currentLocationSource;
- (void)queryCurrentLocation;
- (void)startLocationUpdate;
- (void)stopLocationUpdate;
@end


SWIFT_PROTOCOL("_TtP17iPassSmartConnect8Services_") SWIFT_AVAILABILITY(ios,introduced=9.0)
@protocol Services
- (void)startServices;
- (void)stopServices;
@optional
- (void)startServicesOnAcceptingTnC;
- (void)stopServicesBeforeAcceptingTnC;
- (void)suspendServices;
- (void)resumeServices;
@end

@protocol CredentialsManager;
@protocol DataProcessor;

/// Core services provided by the SDK
/// Services include :
/// Credential Manager : Will allow host application to save and retrieve the currently saved credentials in the application.
/// DeviceScape Service
/// Credential Check Service
SWIFT_PROTOCOL("_TtP17iPassSmartConnect11CoreService_") SWIFT_AVAILABILITY(ios,introduced=9.0)
@protocol CoreService <Services>
/// Credential Manager Service: Will allow host application to save and retrieve their credentials currently persisted in the SDK. Host application can save their own credentials over the default credentials provided by the SDK. Once the default credentials is overriden with the new credentials, it cannot be reverted back.
@property (nonatomic, readonly, strong) id <CredentialsManager> _Nonnull credentialManager;
@property (nonatomic, readonly, strong) id <CredentialsManager> _Nonnull credentialsManager;
@property (nonatomic, readonly, strong) id <DataProcessor> _Nonnull dataProcessor;
@end

typedef SWIFT_ENUM(NSInteger, CredentialStatus, closed) {
  CredentialStatusAuthenticated = 0,
  CredentialStatusRejected = 1,
  CredentialStatusCancelled = 2,
  CredentialStatusError = 3,
  CredentialStatusOffline = 4,
  CredentialStatusUnknown = 5,
};

@class SMCEntitlements;
@class SMCAuthCredentials;

SWIFT_PROTOCOL("_TtP17iPassSmartConnect18CredentialsManager_") SWIFT_AVAILABILITY(ios,introduced=9.0)
@protocol CredentialsManager
/// This method saves the credentials provided by the host application over the currently available default credentials. Old Credentials once overriden cannot be retrieved back.
/// \param credentials SMCCredentials object providing the user credentials to be saved
///
- (void)saveCredentials:(SMCCredentials * _Nonnull)credentials;
/// Private API’s. Should not be accessed
- (SMCAuthCredentials * _Nullable)retrieveCredentials:(SMCEntitlements * _Nonnull)entitlements SWIFT_WARN_UNUSED_RESULT;
- (void)clearDefaultUserInfoWithReason:(NSString * _Nonnull)reason :(SMCEntitlements * _Nonnull)entitlements;
- (void)removeDynamicPasswordEntitiesIfPresent:(SMCEntitlements * _Nonnull)entitlements;
- (BOOL)isBackupPresent:(SMCEntitlements * _Nonnull)entitlements SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAutoAssigned:(SMCEntitlements * _Nonnull)entitlements SWIFT_WARN_UNUSED_RESULT;
- (void)userInfobackup:(SMCEntitlements * _Nonnull)entitlements;
- (void)restoreUserInfoFromBackup:(SMCEntitlements * _Nonnull)entitlements;
- (void)deleteUserInfoBackup:(SMCEntitlements * _Nonnull)entitlements;
- (void)clearPassword:(SMCEntitlements * _Nonnull)entitlements;
- (void)removeDomainIfPresent:(SMCEntitlements * _Nonnull)entitlements;
- (void)removePrefixIfPresent:(SMCEntitlements * _Nonnull)entitlements;
@end


SWIFT_PROTOCOL("_TtP17iPassSmartConnect19CredentialsVerifier_")
@protocol CredentialsVerifier <BackgroundFetchDelegate>
@property (nonatomic, readonly) BOOL isEnabled;
@property (nonatomic, readonly) enum CredentialStatus lastStatus;
- (void)resetLastCheckDate;
- (void)clearLastCheckStatus;
- (void)cancel;
- (void)verifyWithIsBackgroundCheck:(BOOL)isBackgroundCheck completion:(void (^ _Nonnull)(enum CredentialStatus))completion;
@end


SWIFT_CLASS("_TtC17iPassSmartConnect21DSRegistrationService") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface DSRegistrationService : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP17iPassSmartConnect13DataProcessor_") SWIFT_AVAILABILITY(ios,introduced=9.0)
@protocol DataProcessor
- (void)performFetchWithCompletionHandler:(SWIFT_NOESCAPE void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
- (void)handleEventsForBackgroundURLSession:(NSString * _Nonnull)identifier completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

/// Exposed enum for device registration status
typedef SWIFT_ENUM(NSInteger, DeviceRegistrationStatus, closed) {
  DeviceRegistrationStatusRegistered = 0,
  DeviceRegistrationStatusUnregistered = 1,
  DeviceRegistrationStatusUnknown = 2,
  DeviceRegistrationStatusSuspended = 3,
};

@class DevicescapeConnect;
@class OMDSConnectHandler;

SWIFT_PROTOCOL("_TtP17iPassSmartConnect18DeviceScapeService_") SWIFT_AVAILABILITY(ios,introduced=9.0)
@protocol DeviceScapeService
@property (nonatomic, readonly, strong) DevicescapeConnect * _Null_unspecified dsConnect;
@property (nonatomic, readonly, strong) OMDSConnectHandler * _Null_unspecified dsConnectHandler;
@property (nonatomic, readonly, copy) NSString * _Nonnull dsRegistrationPostData;
- (void)registerDeviceScape;
@end




SWIFT_CLASS_NAMED("DirectoryExcludeInfo")
@interface DirectoryExcludeInfo : NSManagedObject
+ (void)insertObject:(void (^ _Nullable)(DirectoryExcludeInfo * _Nonnull))completion;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, PurgeInterval, closed) {
  PurgeIntervalDontPurge = 0,
  PurgeIntervalPurgeAfter5Days = 1,
  PurgeIntervalPurgeAfter10Days = 2,
  PurgeIntervalPurgeAfter30Days = 3,
};

@class NSNumber;

@interface DirectoryExcludeInfo (SWIFT_EXTENSION(iPassSmartConnect))
@property (nonatomic, strong) NSNumber * _Nullable checked;
@property (nonatomic, copy) NSString * _Nullable action;
@property (nonatomic, strong) NSNumber * _Nullable longitude;
@property (nonatomic, copy) NSString * _Nullable mac;
@property (nonatomic, strong) NSNumber * _Nullable purgeType;
@property (nonatomic, strong) NSNumber * _Nullable latitude;
@property (nonatomic, copy) NSString * _Nullable ssid;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSDate * _Nullable purgeDate;
@end


SWIFT_CLASS_NAMED("DirectoryFileInfo")
@interface DirectoryFileInfo : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface DirectoryFileInfo (SWIFT_EXTENSION(iPassSmartConnect))
@property (nonatomic, copy) NSDate * _Nullable TimeStamp;
@property (nonatomic, copy) NSString * _Nullable Version;
@property (nonatomic, copy) NSString * _Nullable DirectoryID;
@property (nonatomic, strong) NSNumber * _Nullable Priority;
@property (nonatomic, copy) NSString * _Nullable Account;
@property (nonatomic, copy) NSString * _Nullable FileName;
@property (nonatomic, copy) NSString * _Nullable Version_Delimiter;
@property (nonatomic, copy) NSString * _Nullable geoRegion;
@end


SWIFT_CLASS("_TtC17iPassSmartConnect17FHISWiFiEntryInfo") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface FHISWiFiEntryInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end





@class SMCResourceDisplayText;

/// The Gateway class represents settings like host, coutnry code, default gateway flag etc
/// used for VPN connections. You would never create objects of this class directly, but these
/// are created if there are VPN is enabled in the activated profile with some gateway.
SWIFT_CLASS_NAMED("Gateway")
@interface Gateway : NSObject
/// The host name of the gateway.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified host;
/// The country code of the gateway.
@property (nonatomic, readonly, copy) NSString * _Nullable countryCode;
/// Is this the default gateway.
@property (nonatomic, readonly) BOOL defaultGateway;
/// The display text of the gateway.
@property (nonatomic, readonly, strong) SMCResourceDisplayText * _Nonnull displayText;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSDictionary;

SWIFT_CLASS("_TtC17iPassSmartConnect19GlobalTimeoutPolicy")
@interface GlobalTimeoutPolicy : NSObject <SingletonPattern>
+ (GlobalTimeoutPolicy * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (BOOL)isTimeoutPolicyParsed SWIFT_WARN_UNUSED_RESULT;
- (void)saveTimeoutPolicies:(NSDictionary * _Nonnull)timeoutPolicies;
@end


SWIFT_PROTOCOL("_TtP17iPassSmartConnect19InternalCoreService_") SWIFT_AVAILABILITY(ios,introduced=9.0)
@protocol InternalCoreService <Services>
- (id <DeviceScapeService> _Nullable)devicescapeService:(SMCEntitlements * _Nonnull)entitlements SWIFT_WARN_UNUSED_RESULT;
- (id <CoreLocationService> _Nullable)locationService:(SMCEntitlements * _Nonnull)entitlements SWIFT_WARN_UNUSED_RESULT;
- (id <CredentialsVerifier> _Nullable)credentialCheckService:(SMCEntitlements * _Nonnull)entitlements SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC17iPassSmartConnect21MobileConfigInstaller") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface MobileConfigInstaller : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

















@class NSMutableURLRequest;

SWIFT_CLASS("_TtC17iPassSmartConnect18OMDSConnectHandler") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface OMDSConnectHandler : NSObject <DSHttpHelperProtocol, DevicescapeConnectDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (NSString * _Nullable)devicescapeGetSSID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)devicescapeGetBSSID SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nullable)devicescapeGetNetworkInfo SWIFT_WARN_UNUSED_RESULT;
- (void)devicescapeHttpBindRequest:(NSMutableURLRequest * _Nonnull)request;
- (void)devicescapeLoginStarted:(NSObject * _Nonnull)info;
- (void)devicescapeLoginCompleted:(NSDictionary * _Nonnull)info;
- (void)devicescapeLogoutStarted;
- (void)devicescapeLogoutCompleted:(NSNumber * _Nonnull)status;
- (void)devicescapeRegistrationStateChanged:(NSNumber * _Nonnull)state;
- (void)devicescapeNetworkState:(NSNumber * _Nonnull)status;
@end


SWIFT_CLASS("_TtC17iPassSmartConnect26OMGlobalAutoRedirectPolicy")
@interface OMGlobalAutoRedirectPolicy : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) OMGlobalAutoRedirectPolicy * _Nonnull sharedInstance;)
+ (OMGlobalAutoRedirectPolicy * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (BOOL)isAutoRedirectPolicyParsed SWIFT_WARN_UNUSED_RESULT;
- (void)saveAutoredirectPolicies:(NSDictionary * _Nonnull)autoredirectPolicies;
@end

/// Enum casing out the possible values of a period of usage
typedef SWIFT_ENUM(NSInteger, Period, closed) {
  PeriodDay = 1,
  PeriodWeek = 7,
};

@class NSPredicate;

SWIFT_CLASS_NAMED("RoamingAlertExcludeInfo")
@interface RoamingAlertExcludeInfo : NSManagedObject
+ (void)insertObject:(void (^ _Nullable)(RoamingAlertExcludeInfo * _Nonnull))completion;
+ (NSArray<RoamingAlertExcludeInfo *> * _Nullable)fetchAll:(NSPredicate * _Nonnull)predicate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface RoamingAlertExcludeInfo (SWIFT_EXTENSION(iPassSmartConnect))
@property (nonatomic, copy) NSString * _Nullable ssid;
@property (nonatomic, copy) NSString * _Nullable notificationID;
@property (nonatomic, copy) NSString * _Nullable mac;
@property (nonatomic, copy) NSString * _Nullable authMethod;
@end

@class SMCTokenActivationData;
@class SMCVoucherActivationData;
@class SMCProfileIdActivationData;
@class SMCWizardActivationData;
@class URLActivationParams;
@class NSError;
@class NSProgress;

SWIFT_CLASS("_TtC17iPassSmartConnect13SMCActivation") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCActivation : NSObject
/// Initialise activation <SMCActivation> object with token Activation data
/// \param tokenData SMCTokenActivationData object with token information.
///
- (nonnull instancetype)initWithTokenData:(SMCTokenActivationData * _Nonnull)tokenData OBJC_DESIGNATED_INITIALIZER;
/// Initialise activation <SMCActivation> object with voucher Activation data
/// \param voucherData SMCVoucherActivationData object with voucher information.
///
- (nonnull instancetype)initWithVoucherData:(SMCVoucherActivationData * _Nonnull)voucherData OBJC_DESIGNATED_INITIALIZER;
/// Initialise activation <SMCActivation> object with test profile Activation data
/// \param profileData SMCProfileIdActivationData object with test profile id information.
///
- (nullable instancetype)initWithEntitlements:(SMCEntitlements * _Nonnull)entitlements profileData:(SMCProfileIdActivationData * _Nonnull)profileData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialise activation <SMCActivation> object with email information
/// \param credentials SMCCredentials object with user email and password email information.
///
- (nonnull instancetype)initWithCredentials:(SMCCredentials * _Nonnull)credentials OBJC_DESIGNATED_INITIALIZER;
/// Initialise activation <SMCActivation> object with email Wizard activation data
/// \param emailData SMCWizardActivation object with wizard activation data
///
- (nullable instancetype)initWithEntitlements:(SMCEntitlements * _Nonnull)entitlements wizardData:(SMCWizardActivationData * _Nonnull)wizardData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialise activation <SMCActivation> object with url params. Urse in activation with
/// URL params.
/// \param urlParams URLActivation.Params
///
- (nullable instancetype)initWithEntitlements:(SMCEntitlements * _Nonnull)entitlements params:(URLActivationParams * _Nonnull)params error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Function starts activation with activation data. It reports progress using the progress object and
/// success or failure through success and failure handlers.
/// \param success IActivationSuccess.
///
/// \param error IActivationError.
///
- (void)activate:(void (^ _Nonnull)(void))success error:(void (^ _Nonnull)(NSError * _Nonnull))error;
/// Provides NSProgress object instance which provides information on the activation progress
///
/// returns:
///
/// <ul>
///   <li>
///     NSprogress object
///   </li>
/// </ul>
- (NSProgress * _Nullable)activateProgress SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17iPassSmartConnect17SMCActivationData")
@interface SMCActivationData : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// SMCCredentials - The structure to hold the user credentials.
/// Use the init(username, password, domain?, prefix?) to initialse the object with the required credentials.
/// Property includes username, password, domain and prefix
SWIFT_CLASS_NAMED("SMCCredentials")
@interface SMCCredentials : NSObject
@property (nonatomic, copy) NSString * _Nonnull userName;
@property (nonatomic, copy) NSString * _Nonnull password;
@property (nonatomic, copy) NSString * _Nonnull domain;
@property (nonatomic, copy) NSString * _Nonnull customerPrefix;
/// Initialiser for SMCCredentials
/// \param username User name required for connection
///
/// \param password Password required for connection
///
/// \param domain User domain required for connection
///
/// \param prefix ( optional ) Customer prefix required for connection
///
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password domain:(NSString * _Nullable)domain prefix:(NSString * _Nullable)prefix OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum SMCCredentialType : NSInteger;

SWIFT_CLASS_NAMED("SMCAuthCredentials") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCAuthCredentials : SMCCredentials <NSCopying>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, copy) NSString * _Nonnull secret;
@property (nonatomic, copy) NSString * _Nonnull userToken;
@property (nonatomic) enum SMCCredentialType credType;
@property (nonatomic, copy) NSString * _Nonnull activationEmail;
- (nullable instancetype)init:(SMCEntitlements * _Nonnull)entitlements OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isCredentialsEmpty SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isCredentialsPresent SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isACAAssigned SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDynamicPasswordEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password domain:(NSString * _Nullable)domain prefix:(NSString * _Nullable)prefix SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SMCAuthOriginator, "SMCAuthOriginator", closed) {
  SMCAuthOriginatorUser = 0,
  SMCAuthOriginatorAutoLogin = 1,
  SMCAuthOriginatorPluginBackground = 2,
  SMCAuthOriginatorPluginForegroundAuthentication = 3,
  SMCAuthOriginatorPluginForegroundCredentials = 4,
  SMCAuthOriginatorUnknown = 5,
};


SWIFT_CLASS_NAMED("SMCAutoLoginSettings") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCAutoLoginSettings : NSObject
@property (nonatomic, readonly) BOOL isAutoLoginEnabledInProfile;
@property (nonatomic) BOOL isAutoLoginEnabledforUser;
@property (nonatomic, readonly) BOOL isAutoLoginEnabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=9.0);
@end


SWIFT_CLASS("_TtC17iPassSmartConnect17SMCCMPolicyParser")
@interface SMCCMPolicyParser : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17iPassSmartConnect24SMCCaptchaViewController")
@interface SMCCaptchaViewController : CaptchaViewController <WKNavigationDelegate>
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol Characterizer;
@protocol CaptivePluginCommand;

SWIFT_CLASS("_TtC17iPassSmartConnect23SMCCaptivePluginHandler") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCCaptivePluginHandler : NSObject <CaptivePluginHandler>
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull commandQ;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull mostRecentScanList;
@property (nonatomic, readonly, strong) id <Characterizer> _Nonnull characterizer;
- (nonnull instancetype)initWithCharacterizer:(id <Characterizer> _Nonnull)characterizer OBJC_DESIGNATED_INITIALIZER;
- (void)processCommand:(id <CaptivePluginCommand> _Nonnull)command;
- (void)filterScan:(id <CaptivePluginCommand> _Nonnull)command;
- (void)evaluate:(id <CaptivePluginCommand> _Nonnull)command;
- (void)authenticate:(id <CaptivePluginCommand> _Nonnull)command;
- (void)presentUI:(id <CaptivePluginCommand> _Nonnull)command;
- (void)maintain:(id <CaptivePluginCommand> _Nonnull)command;
- (void)logoff:(id <CaptivePluginCommand> _Nonnull)command;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



@protocol CaptivePluginNetwork;

/// The SMCCharacterizer class conforms to Characterizer protocol and provides default implementation for
/// characterizing list of networks.
SWIFT_CLASS_NAMED("SMCCharacterizer") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCCharacterizer : NSObject <Characterizer>
@property (nonatomic) NSUInteger minConnectRanking;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Characterizes a list of networks synchronously.
/// \param networks An array of CaptivePluginNetwork objects for characterization.
///
///
/// returns:
/// An array of CaptivePluginNetwork objects after characterization.
- (NSArray<id <CaptivePluginNetwork>> * _Nonnull)syncCharacterizeNetworks:(NSArray<id <CaptivePluginNetwork>> * _Nonnull)networks SWIFT_WARN_UNUSED_RESULT;
@end


/// The SMCConnectionHistory provides information about a network that was connected recently.
SWIFT_CLASS_NAMED("SMCConnectionHistory") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCConnectionHistory : NSObject <NSCoding>
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// :nodoc:
@property (nonatomic, readonly) NSInteger hashValue;
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class SMCHistoryItem;

SWIFT_CLASS_NAMED("SMCConnectionHistoryManager") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCConnectionHistoryManager : NSObject
+ (NSArray<SMCHistoryItem *> * _Nullable)getAll SWIFT_WARN_UNUSED_RESULT;
+ (void)clear;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=9.0);
@end

enum SMCConnectionRetryOptions : NSInteger;
@protocol CaptivePluggable;

/// The SMCConnectionManager class manages the connections to different networks supported by the profile.
/// SMCConnectionManager object is never created directly but can be accessed for various purposes through
/// SMCCore.
/// In most cases you’d never need to modify any properties of the connection or even need to do anything
/// with any properties of it. The only property that needs to be set is delegate that would receive various
/// connection events during the connection.
SWIFT_CLASS_NAMED("SMCConnectionManager") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCConnectionManager : NSObject
/// The delegate for the connection. The delegate receives various connection events
/// during the lifetime of the connection.
@property (nonatomic, weak) id <ConnectionDelegate> _Nullable delegate;
/// SMCConnectionRetryOptions : Connection retry options. Default is SMCConnectionRetryOptionsNone.
@property (nonatomic) enum SMCConnectionRetryOptions retryOptions;
@property (nonatomic) NSTimeInterval retryDelay;
/// The current connection state. Readonly.
@property (nonatomic, readonly) enum ConnectionState connectionState;
/// Captive plugin that handles interactions with iOS.
@property (nonatomic, strong) id <CaptivePluggable> _Nullable captivePlugin;
@property (nonatomic, readonly, strong) SMCAutoLoginSettings * _Nonnull isAutoLoginEnabled;
/// Returns auto login settings.
@property (nonatomic, readonly, strong) SMCAutoLoginSettings * _Nonnull autoLoginSettings;
/// Current SMCNetwork, returns nil if device is not connected to any WiFi network.
@property (nonatomic, strong) SMCNetwork * _Nullable currentNetwork;
/// Current reachability of the device.
@property (nonatomic, readonly) SMCReachability reachability;
/// Function returns if the SmartConnect SDK is online (internet is reachable). On simulator it simply returns true without actually checking for internet reachability.
///
/// returns:
/// True if internet is reachable, false otherwise.
- (BOOL)isOnline SWIFT_WARN_UNUSED_RESULT;
/// Function can be used to start connection to a given network. The SMCAuthOriginator can be used to
/// indicate the originator of the connection. This is mostly used in cases when auto-login is turned
/// off and user needs to start the connection manually.
/// \param network The SMCNetwork to start the connection to. This can be retrived using the
/// current network.
///
/// \param originator The originator of the connection.
///
///
/// returns:
/// None
- (void)connect:(SMCNetwork * _Nonnull)network originator:(enum SMCAuthOriginator)originator;
/// Start disconnect from the current network. If no network connected, does not do anything.
///
/// returns:
/// True if current network is valid and disconnect was started, false otherwise.
- (BOOL)disconnect;
/// Start disconnect from the network using a given logout initiator. <em>This method is depreceated, please
/// use disconnect() instead.</em>
/// \param network The SMCNetwork to start the disconnect to. This should be retrived using
/// currentNetwork()
/// parameter initiator: The initiator of the disconnect.
///
///
/// returns:
/// True if current network is valid and disconnect was started, false otherwise.
- (BOOL)disconnect:(SMCNetwork * _Nonnull)network initiator:(SMCLogoutInitiator)initiator;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCConnectionManager (SWIFT_EXTENSION(iPassSmartConnect))
- (BOOL)isConnectionInProgress SWIFT_WARN_UNUSED_RESULT;
@end

/// SMCConnectionRetryOptions : The following are the options that the user can set if the host application wants to retry for a second time in case of failure in connection due to wrong credentials
/// <ul>
///   <li>
///     SMCConnectionRetryOptionsBadCredentails -> The SDK will retry one more time for connection with the same set of credentials in case of failure due to bad credentials
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, SMCConnectionRetryOptions, "SMCConnectionRetryOptions", closed) {
  SMCConnectionRetryOptionsNone = 0,
  SMCConnectionRetryOptionsBadCredentials = 1,
};

@class SMCSQMErrorCode;

SWIFT_CLASS_NAMED("SMCConnectionStatus") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCConnectionStatus : NSObject
@property (nonatomic, readonly, strong) SMCNetwork * _Nullable network;
@property (nonatomic, readonly, strong) NSError * _Nullable error;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic) SMCReachability reachability;
@property (nonatomic) BOOL isOnline;
@property (nonatomic, strong) SMCSQMErrorCode * _Nullable sqmErrorCode;
/// True if login can  be performed on this network, false otherwise.
@property (nonatomic) BOOL canLogin;
/// True if logout is supported by this network, false otherwise.
@property (nonatomic) BOOL canLogout;
/// If the current connection is a inherited connection
@property (nonatomic) BOOL isInherited;
@property (nonatomic, copy) NSDate * _Nullable loggedInTime;
- (nonnull instancetype)init:(SMCNetwork * _Nullable)network OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class SMCCoreConfig;
@class SMCMigrationManager;
@class SMCDataUsageManager;

/// The core of the SDK. Clients should initiate this class by calling ‘initialize’.
/// From there on a shared instance can be retrieved by calling shared.
/// The following code snippet shows how to initialize the SDK using SMCCore:
/// \code
///    if #available(iOS 9.0, *) {
///        do{
///            try SMCCore.initialize(sdkKey, annotation: "TestAnnotation", logLevel:.trace)
///            let characterizer = SMCCharacterizer()
///            let pluginHandler = SMCCaptivePluginHandler(characterizer: characterizer)
///            SMCCore.shared.connectionManager?.captivePlugin = SMCCaptivePluginFactory.createPluginWith(pluginHandler)
///            SMCCore.shared.connectionManager?.delegate = connectionDelegate
///        }catch {
///        }
///    }
///
///
/// \endcode
SWIFT_CLASS("_TtC17iPassSmartConnect7SMCCore") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCCore : NSObject
/// Returns the shared instance of SMCCore.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SMCCore * _Nonnull shared;)
+ (SMCCore * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// CoreConfig Object. Provides access to all the configuration details of the SDK
///
/// returns:
///
/// Initialized SMCCoreConfig Object
@property (nonatomic, readonly, strong) SMCCoreConfig * _Nullable coreConfig;
/// Connection Manager Object. Provides an instance object of the SMCConnectionmanager class
///
/// returns:
/// Initialised object of the connection manager class
@property (nonatomic, readonly, strong) SMCConnectionManager * _Nullable connectionManager;
/// Log Level for the SDK
/// Sets or returns the current loglevel for the SDK
@property (nonatomic) SMCLogLevel logLevel;
/// Core services provided by the SDK
/// Services include :
/// Credential Manager : Will allow host application to save and retrieve the currently saved credentials in the application.
@property (nonatomic, readonly, strong) id <CoreService> _Nullable coreServices;
@property (nonatomic, readonly, strong) id <InternalCoreService> _Nullable internalCoreServices;
/// Whether the SDK is currently suspended or not. Default is false.
@property (nonatomic, readonly) BOOL isSuspended;
/// The migration manager.
@property (nonatomic, readonly, strong) SMCMigrationManager * _Nonnull migrationManager;
@property (nonatomic) BOOL consoleLoggingEnabled;
@property (nonatomic, readonly, strong) SMCDataUsageManager * _Null_unspecified usageDataManager;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// This method requires SDK key of the developer account, connection manager data and the desirable
/// log level. Connection Manager requires the annotation to be shown in Wifi Settings, the connection
/// delegate object and timeout interval.
/// \param sdkKey The SDK key for the SDK.
///
/// \param annotation The annotation to be shown for each supported network in the device’s WiFi
/// settings.
///
/// \param logLevel Desired log level. Default is SMCLogLevel.info.
///
+ (BOOL)initialize:(NSString * _Nonnull)sdkKey annotation:(NSString * _Nonnull)annotation logLevel:(SMCLogLevel)logLevel error:(NSError * _Nullable * _Nullable)error;
/// The functin can be used to extract the SDK logs. The function extracts the logs and returns
/// the path of hte zip file.
///
/// returns:
/// The path of the extracted logs zip file.
+ (NSString * _Nonnull)extractLogs SWIFT_WARN_UNUSED_RESULT;
/// Function can be used to suspend the SDK functionality. Once suspended SDK will not perform any
/// connection to any network. To resume the functionality call <em>resume()</em>.
- (void)suspend;
/// The function is used to resume the functinality after the SDK was suspended. If the SDK is not in
/// suspended state this function has no effect.
- (void)resume;
- (void)deactivate;
- (void)startServicesOnAcceptingTnC;
/// This method Returns true if the SDK is activated, false otherwise
///
/// returns:
/// True if SDK is activated, false otherwise.
- (BOOL)activated SWIFT_WARN_UNUSED_RESULT;
/// This method Returns true if the SDK is activated, false otherwise
///
/// returns:
/// True if SDK is activated, false otherwise.
- (BOOL)isActivated SWIFT_WARN_UNUSED_RESULT;
@end




/// The Core Configuration class of the SDK. Provides information on the configuration details of the platform and SDK
SWIFT_CLASS("_TtC17iPassSmartConnect13SMCCoreConfig") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCCoreConfig : NSObject
/// SDK Key of the SDk
///
/// returns:
///
/// SDK key in String
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkKey;
/// This method returns the platform OS of the device
///
/// returns:
///
/// String value for the platform OS
- (NSString * _Nonnull)platform SWIFT_WARN_UNUSED_RESULT;
/// This method returns the bundle identifier of the host app.
///
/// returns:
/// The bundle identifier of the hosting application.
- (NSString * _Nullable)clientBundleIdentifier SWIFT_WARN_UNUSED_RESULT;
/// This method returns the SDK bundle identifier.
///
/// returns:
/// Optional String value for the SDK bundle identifier.
- (NSString * _Nullable)sdkBundleIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The current version of the SDK.
///
/// returns:
/// The current version of the SDK.
- (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// The current full version of the SDK.
///
/// returns:
/// The current full version of the SDK.
- (NSString * _Nonnull)sdkVersionFull SWIFT_WARN_UNUSED_RESULT;
/// The current version of the Host App.
///
/// returns:
/// The current version of the Host App.
- (NSString * _Nonnull)clientVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SMCCredentialType, "SMCCredentialType", closed) {
  SMCCredentialTypeAutoAssigned = 0,
  SMCCredentialTypeUserAssigned = 1,
  SMCCredentialTypeAcaMigrated = 2,
  SMCCredentialTypeCredTypeInvalid = 3,
};




@class UsageSummary;

/// Helper to extract Wifi/Cellular Data stats in usable forms
SWIFT_CLASS("_TtC17iPassSmartConnect19SMCDataUsageManager")
@interface SMCDataUsageManager : NSObject
- (UsageSummary * _Nullable)dailyUsageSummaryFor:(Interface)interface fromMonthStartDay:(NSInteger)monthStartDay till:(NSDate * _Nonnull)endDate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nullable)totalUsageFor:(Interface)interface fromMonthStartDay:(NSInteger)monthStartDay till:(NSDate * _Nonnull)endDate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nullable)usagesFor:(Interface)interface type:(enum Period)type numberOfPeriods:(NSInteger)numberOfPeriods till:(NSDate * _Nonnull)endDate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nullable)usagesFor:(Interface)interface fromMonthStartDay:(NSInteger)monthStartDay till:(NSDate * _Nonnull)endDate forNumberOfMonths:(NSInteger)numberOfMonths error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (void)updateLatestUsageFor:(Interface)interface;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end








@interface SMCDataUsageManager (SWIFT_EXTENSION(iPassSmartConnect))
- (void)updateUsageData;
@end


SWIFT_CLASS_NAMED("SMCDataUsageMonitor") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCDataUsageMonitor : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC17iPassSmartConnect27SMCDeviceStatusCheckManager") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCDeviceStatusCheckManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SMCDeviceStatusCheckManager * _Nonnull shared;)
+ (SMCDeviceStatusCheckManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Provides the current device status - Registered/Unregistered/Unknown
@property (nonatomic, readonly) enum DeviceRegistrationStatus deviceStatus;
@end




SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCDeviceStatusCheckManager (SWIFT_EXTENSION(iPassSmartConnect))
- (void)fetchDeviceRegistrationStatusWithResetState:(BOOL)resetState :(void (^ _Nonnull)(enum DeviceRegistrationStatus))completion;
@end


SWIFT_CLASS_NAMED("SMCDirectoryManager") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCDirectoryManager : NSObject
- (NSArray<DirectoryFileInfo *> * _Nullable)getAllDirectories SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nullable)allDirectoriesInfo SWIFT_WARN_UNUSED_RESULT;
- (BOOL)clearStore SWIFT_WARN_UNUSED_RESULT;
- (BOOL)wifiEntryPresentForNetworkWithSsid:(NSString * _Nonnull)ssid authMethod:(NSString * _Nonnull)authMethod SWIFT_WARN_UNUSED_RESULT;
- (NSArray<DirectoryFileInfo *> * _Nullable)getDirectoriesInfo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=9.0);
@end


SWIFT_CLASS("_TtC17iPassSmartConnect11SMCDispatch")
@interface SMCDispatch : NSObject
+ (void)onceWithToken:(NSString * _Nonnull)token block:(SWIFT_NOESCAPE void (^ _Nonnull)(void))block;
+ (void)smartOnMain:(void (^ _Nonnull)(void))block;
+ (void)smartSyncOnMain:(void (^ _Nonnull)(void))block;
+ (void)asyncOnMain:(void (^ _Nonnull)(void))block;
+ (void)asyncOnGlobal:(void (^ _Nonnull)(void))block;
+ (void)asyncOnQueue:(dispatch_queue_t _Nonnull)queue block:(void (^ _Nonnull)(void))block;
+ (void)syncOnMain:(SWIFT_NOESCAPE void (^ _Nonnull)(void))block;
+ (void)syncOnGlobal:(SWIFT_NOESCAPE void (^ _Nonnull)(void))block;
+ (void)syncOnQueue:(dispatch_queue_t _Nonnull)queue block:(SWIFT_NOESCAPE void (^ _Nonnull)(void))block;
+ (void (^ _Nonnull)(void))runOnMainAfter:(NSTimeInterval)time block:(void (^ _Nonnull)(void))block;
+ (void (^ _Nonnull)(void))runOnGlobalAfter:(NSTimeInterval)time block:(void (^ _Nonnull)(void))block;
+ (void (^ _Nonnull)(void))runAfter:(dispatch_queue_t _Nonnull)queue time:(NSTimeInterval)time block:(void (^ _Nonnull)(void))block;
+ (void)asyncBarrierOn:(dispatch_queue_t _Nonnull)queue block:(void (^ _Nonnull)(void))block;
+ (void)asyncGroupOnGlobal:(dispatch_group_t _Nonnull)group block:(void (^ _Nonnull)(void))block;
+ (void)asyncGroupOn:(dispatch_group_t _Nonnull)group queue:(dispatch_queue_t _Nonnull)queue block:(void (^ _Nonnull)(void))block;
+ (void)notifyGroupOnGlobal:(dispatch_group_t _Nonnull)group block:(void (^ _Nonnull)(void))block;
+ (void)notifyGroupOn:(dispatch_group_t _Nonnull)group queue:(dispatch_queue_t _Nonnull)queue block:(void (^ _Nonnull)(void))block;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class for email activation data reference. Initialise an object of this class with user email and password
/// and pass the object as a paramater to the activate method
SWIFT_CLASS("_TtC17iPassSmartConnect22SMCEmailActivationData") SWIFT_DEPRECATED_MSG("This class is no longer available for initialising email information")
@interface SMCEmailActivationData : SMCActivationData
/// Initialise activation data <SMCEmailActivationData> object with token string
/// \param username User email id in String
///
/// \param password User password in String
///
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)name password:(NSString * _Nonnull)pswd OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17iPassSmartConnect15SMCEntitlements") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCEntitlements : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) SMCEntitlements * _Nonnull default_;)
+ (SMCEntitlements * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (nonnull instancetype)initWithUniqueKey:(NSString * _Nonnull)uniqueKey OBJC_DESIGNATED_INITIALIZER;
+ (SMCEntitlements * _Nonnull)entitlementsWith:(NSString * _Nonnull)uniqueKey SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC17iPassSmartConnect8SMCError")
@interface SMCError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum SMCNetworkUsageType : NSInteger;
@class RLMRealm;
@class RLMObjectSchema;
@class RLMSchema;

SWIFT_CLASS_NAMED("SMCHistoryItem") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCHistoryItem : RealmSwiftObject
@property (nonatomic, copy) NSString * _Nullable ssid;
@property (nonatomic, copy) NSString * _Nullable bssid;
@property (nonatomic, copy) NSString * _Nullable uniqueKey;
/// The network image associated with the network if configured through profile.
@property (nonatomic, readonly, copy) NSString * _Nullable networkImage;
/// The date when the authetnication was done.
@property (nonatomic, copy) NSDate * _Nullable loggedInDate;
/// The duraion of the connection. Valid only if an explicit logoff was done by the user.
@property (nonatomic) int32_t sessionLength;
@property (nonatomic, readonly) enum SMCNetworkUsageType usageType;
+ (NSString * _Nullable)primaryKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=9.0);
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=9.0);
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=9.0);
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SMCInstallType, "SMCInstallType", closed) {
  SMCInstallTypeFresh = 0,
  SMCInstallTypeSame = 1,
  SMCInstallTypeUpgrade = 2,
};


SWIFT_CLASS("_TtC17iPassSmartConnect17SMCLogCounterInfo")
@interface SMCLogCounterInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SMCLogCounterInfo * _Nonnull sharedInstance;)
+ (SMCLogCounterInfo * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger activationCounterVal;
@property (nonatomic) NSInteger connectionCounterVal;
@property (nonatomic) NSInteger currentLogServiceFileIndexVal;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)saveSMCLogCounterInfoDetails;
@end


SWIFT_CLASS("_TtC17iPassSmartConnect10SMCLogUtil")
@interface SMCLogUtil : NSObject
/// convert the values into JSON-encoded string
+ (NSString * _Nonnull)jsonStringForLog:(NSString * _Nonnull)date component:(NSString * _Nonnull)component transactionId:(NSString * _Nonnull)transactionId log:(NSString * _Nonnull)log SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)saveToFile:(NSString * _Nonnull)str url:(NSURL * _Nonnull)url;
+ (NSString * _Nonnull)convertToSHA256HashBase64StringWithStr:(NSString * _Nonnull)str SWIFT_WARN_UNUSED_RESULT;
+ (void)removeFirstLineWithUrl:(NSURL * _Nonnull)url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17iPassSmartConnect14SMCLogZipEmail")
@interface SMCLogZipEmail : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
+ (NSArray<NSString *> * _Nonnull)failedZipInfo SWIFT_WARN_UNUSED_RESULT;
+ (void)createDeviceSnapShotInfo;
@end


SWIFT_CLASS_NAMED("SMCMigrationManager") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCMigrationManager : NSObject <NSKeyedUnarchiverDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (enum SMCInstallType)installType SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("SMCMotionManager") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCMotionManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("SMCNetStats")
@interface SMCNetStats : NSObject
- (nonnull instancetype)initInBytes:(NSUInteger)inBytes outBytes:(NSUInteger)outBytes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The SMCNetwork class provides information for a particular network. The current network’s SMCNetwork object
/// can be accessed from connection manager’s current network object.
SWIFT_CLASS_NAMED("SMCNetwork") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCNetwork : NSObject
/// @brief accesspoint information for the network which includes network name, bssid, etc.
@property (nonatomic, readonly, strong) id <CaptivePluginNetwork> _Null_unspecified accessPoint;
@property (nonatomic, readonly) BOOL canLogout;
@property (nonatomic, readonly) enum SMCNetworkUsageType usageType;
@property (nonatomic, readonly) BOOL isiPass;
@property (nonatomic, readonly) NSInteger hashValue;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The best ranking of this network among all the supported authetnication methods.
@property (nonatomic, readonly) float predictedSuccess;
+ (SMCNetwork * _Nullable)currentNetworkInfo SWIFT_WARN_UNUSED_RESULT;
+ (SMCNetwork * _Nullable)currentNetwork SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// @brief Usage type of the network. That is, is the network paid, or free.
typedef SWIFT_ENUM_NAMED(NSInteger, SMCNetworkUsageType, "UsageType", closed) {
  SMCNetworkUsageTypePaid = 0,
  SMCNetworkUsageTypeFree = 1,
  SMCNetworkUsageTypeOthers = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SMCNetworkAccessType, "AccessType", closed) {
  SMCNetworkAccessTypePaid = 0,
  SMCNetworkAccessTypeFree = 1,
  SMCNetworkAccessTypeOthers = 2,
};





typedef SWIFT_ENUM_NAMED(NSInteger, SMCNotifyUserReason, "SMCNotifyUserReason", closed) {
/// Inflight Internet not available. Notify User
  SMCNotifyUserReasonInternetNotYetAvailable = 0,
/// Inflight Entertainment available. Notify User
  SMCNotifyUserReasonInflightServicesAvailable = 1,
/// Inflight No Service available. Notify User
  SMCNotifyUserReasonInflightNoServiceAvailable = 2,
};

@class AccountContactInfoWrapper;
@class AccountConfigWrapper;
@class AccountsInfoWrapper;
@class EngineConfigWrapper;
@class ProfileConfigWrapper;
@class ServiceConfigWrapper;
@class UIConfigWrapper;
@class ResourceConfigWrapper;
@class CMPolicyConfigWrapper;
@class HelpConfigWrapper;
@class ConnProfilerConfigWrapper;
@class SignalThresholdConfigWrapper;
@class OMSQMPrivacyFilters;
@class OMPreAuth;
@class EventActions;
@class NotificationMessages;

SWIFT_CLASS_NAMED("SMCProfile") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCProfile : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull pin;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@property (nonatomic, readonly) BOOL isTestMode;
@property (nonatomic) BOOL isProfileMigrationInProcess;
@property (nonatomic, readonly, strong) AccountContactInfoWrapper * _Nonnull accountContactWrapper;
@property (nonatomic, readonly, strong) AccountConfigWrapper * _Nonnull accountWrapper;
@property (nonatomic, readonly, strong) AccountsInfoWrapper * _Nonnull accountsInfoWrapper;
@property (nonatomic, readonly, strong) EngineConfigWrapper * _Nonnull engineWrapper;
@property (nonatomic, readonly, strong) ProfileConfigWrapper * _Nonnull profileWrapper;
@property (nonatomic, readonly, strong) ServiceConfigWrapper * _Nonnull serviceWrapper;
@property (nonatomic, readonly, strong) UIConfigWrapper * _Nonnull uiConfigWrapper;
@property (nonatomic, readonly, strong) SMCCMPolicyParser * _Nonnull cmPolicyParser;
@property (nonatomic, readonly, strong) ResourceConfigWrapper * _Nonnull resourceConfigWrapper;
@property (nonatomic, readonly, strong) CMPolicyConfigWrapper * _Nullable cmPolicyConfigWrapper;
@property (nonatomic, readonly, strong) HelpConfigWrapper * _Nullable helpConfigWrapper;
@property (nonatomic, readonly, strong) ConnProfilerConfigWrapper * _Nullable connProfilerConfigWrapper;
@property (nonatomic, readonly, strong) SignalThresholdConfigWrapper * _Nonnull signalThresholdConfigWrapper;
@property (nonatomic, readonly, strong) OMSQMPrivacyFilters * _Nullable sqmPrivacyFilter;
@property (nonatomic, readonly, strong) OMPreAuth * _Nullable omPreAuthWrapper;
@property (nonatomic, readonly, strong) SMCDirectoryManager * _Nonnull directoryManager;
@property (nonatomic, readonly, strong) EventActions * _Nullable eventActions;
@property (nonatomic, readonly, strong) NotificationMessages * _Nonnull notificationMessages;
+ (SMCProfile * _Nonnull)defaultWithEntitlements:(SMCEntitlements * _Nonnull)entitlements SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCProfile (SWIFT_EXTENSION(iPassSmartConnect))
@end


SWIFT_CLASS_NAMED("PublicProfile")
@interface SMCPublicProfile : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=9.0);
@end


SWIFT_CLASS_NAMED("SMCProfileIdActivationData")
@interface SMCProfileIdActivationData : SMCActivationData
@property (nonatomic, readonly, copy) NSString * _Nonnull profileId;
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
@property (nonatomic, copy) NSString * _Nullable pin;
@property (nonatomic) BOOL test;
- (nonnull instancetype)initWithProfileId:(NSString * _Nonnull)profileId pin:(NSString * _Nullable)pin email:(NSString * _Nonnull)email OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("SMCResourceDisplayText")
@interface SMCResourceDisplayText : NSObject
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id file:(NSString * _Nonnull)file usedefault:(BOOL)usedefault OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (NSString * _Nullable)text SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17iPassSmartConnect18SMCResourcesBundle")
@interface SMCResourcesBundle : NSObject
- (NSBundle * _Nonnull)mainBundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("SMCSQMErrorCode")
@interface SMCSQMErrorCode : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("SMCSessionStore")
@interface SMCSessionStore : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("SMCSettings")
@interface SMCSettings : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SMCSettings * _Nonnull shared;)
+ (SMCSettings * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(SMCSettings * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (BOOL)boolForKey:(NSString * _Nonnull)forKey SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataForKey:(NSString * _Nonnull)forKey SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)objectForKey:(NSString * _Nonnull)forKey SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)stringForKey:(NSString * _Nonnull)forKey SWIFT_WARN_UNUSED_RESULT;
- (void)setDataWithData:(NSData * _Nonnull)data forKey:(NSString * _Nonnull)forKey;
- (void)setObjectWithValue:(id _Nonnull)value forKey:(NSString * _Nonnull)forKey;
- (void)setStringWithValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
- (void)removeObjectForKey:(NSString * _Nonnull)forKey;
- (void)save;
@end





@protocol SpeedTestDelegate;

SWIFT_CLASS("_TtC17iPassSmartConnect12SMCSpeedTest") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCSpeedTest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (nonnull instancetype)init:(id <SpeedTestDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (void)testLatency;
- (void)start;
- (void)cancel;
- (BOOL)isSpeedTestAllowed SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC17iPassSmartConnect26SMCSpeedTestCompletionInfo")
@interface SMCSpeedTestCompletionInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17iPassSmartConnect17SMCSpeedTestError")
@interface SMCSpeedTestError : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class SMCSpeedTestSelectedMedia;

SWIFT_CLASS("_TtC17iPassSmartConnect19SMCSpeedTestResults")
@interface SMCSpeedTestResults : NSObject
@property (nonatomic, copy) NSArray<SMCSpeedTestSelectedMedia *> * _Nonnull supportedMedia;
@property (nonatomic) ConnectionQualityType connectionQualityType;
/// Latency of server in milli-seconds
@property (nonatomic) double latencyOfServer;
/// Packet Loss occured during test ( in percentage )
@property (nonatomic) double packetLossInPercentage;
/// Average download speed in Bits/sec
@property (nonatomic) double avgDownloadSpeedInbps;
/// Average upload speed in Bits/sec
@property (nonatomic) double avgUploadSpeedInbps;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17iPassSmartConnect25SMCSpeedTestSelectedMedia")
@interface SMCSpeedTestSelectedMedia : NSObject
@property (nonatomic) SpeedTestMediaType supportedMedia;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Class for token activation data reference. Initialise an object of this class with token string
/// and pass the object as a paramater to the activate method
SWIFT_CLASS("_TtC17iPassSmartConnect22SMCTokenActivationData")
@interface SMCTokenActivationData : SMCActivationData
/// Initialise activation data <SMCTokenActivationData> object with token string
/// \param token Activation token string recieved in your email.
///
- (nonnull instancetype)init:(NSString * _Nonnull)i_token OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SMCUIRequiredReason, "SMCUIRequiredReason", closed) {
/// The UI is required for the credentials.
  SMCUIRequiredReasonRequiresCredentials = 0,
/// The UI is required for invalid credentials.
  SMCUIRequiredReasonInvalidCredentials = 1,
/// Connection Requires Application to be in Foreground
  SMCUIRequiredReasonRequiresAppInForeground = 2,
/// Connection Requires Application to be in Foreground for manual connection
  SMCUIRequiredReasonRequiresManualConnect = 3,
/// Connection Requires User Consent to Proceed
  SMCUIRequiredReasonRequiresUserConsent = 4,
  SMCUIRequiredReasonRequiresAppForManualConnection = 5,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SMCUIRequiredResponse, "SMCUIRequiredResponse", closed) {
  SMCUIRequiredResponseContinue = 0,
  SMCUIRequiredResponseCancel = 1,
};

enum SMCUpdateStatus : NSInteger;

SWIFT_CLASS_NAMED("SMCUpdateRequester") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCUpdateRequester : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)checkForUpdatesWithCompletionHandler:(void (^ _Nonnull)(enum SMCUpdateStatus))completionHandler;
@end


SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCUpdateRequester (SWIFT_EXTENSION(iPassSmartConnect)) <BackgroundFetchDelegate>
- (BOOL)startFetch SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SMCUpdateStatus, "SMCUpdateStatus", closed) {
  SMCUpdateStatusNone = 0,
  SMCUpdateStatusInProgress = 1,
  SMCUpdateStatusSuccess = 2,
  SMCUpdateStatusCanceled = 3,
  SMCUpdateStatusFilesUptodate = 4,
  SMCUpdateStatusTimeout = 5,
  SMCUpdateStatusHttpError = 6,
  SMCUpdateStatusFailedInvalidPlatform = 7,
  SMCUpdateStatusFailedToLoad = 8,
  SMCUpdateStatusFailedUnknown = 9,
};


SWIFT_CLASS_NAMED("SMCUserCredentials")
@interface SMCUserCredentials : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("SMCUserId") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SMCUserId : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Class for voucher activation data reference. Initialise an object of this class with voucher string
/// and pass the object as a paramater to the activate method
SWIFT_CLASS("_TtC17iPassSmartConnect24SMCVoucherActivationData")
@interface SMCVoucherActivationData : SMCActivationData
/// Initialise activation data <SMCVoucherActivationData> object with voucher string
/// <ul>
///   <li>
///     Parameters: - voucher:  Activation voucher string recieved in your email.
///   </li>
/// </ul>
- (nonnull instancetype)init:(NSString * _Nonnull)voucherStr OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17iPassSmartConnect23SMCWizardActivationData")
@interface SMCWizardActivationData : NSObject
- (nonnull instancetype)init:(NSString * _Nonnull)activationData key:(NSString * _Nonnull)key OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("SQMCredCheckDiagRecordCreator") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SQMCredCheckDiagRecordCreator : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SQMErrorCode, "SQMErrorCode", closed) {
  SQMErrorCodeNoErrorCode = -999999,
  SQMErrorCodeGeneralInheritedConnection = 14407,
  SQMErrorCodeGeneralUserCancelledConnection = 23003,
  SQMErrorCodeConnectionAbortedForNWSwitch = 23999,
  SQMErrorCodeGeneralUndefined = 99999,
  SQMErrorCodeGisNoError = 17000,
  SQMErrorCodeGisProtocolError = 17001,
  SQMErrorCodeGisLoginSucceeded = 17050,
  SQMErrorCodeGisLoginFailed = 17100,
  SQMErrorCodeGisServerTimeout = 17102,
  SQMErrorCodeGisServerDisabled = 17105,
  SQMErrorCodeGisLogoffSucceeded = 17150,
  SQMErrorCodeGisInternalError = 17255,
  SQMErrorCodeGisNoGISTagsFound = 17501,
  SQMErrorCodeGisMaxRedirectsExceeded = 17502,
  SQMErrorCodeGisInsecureLoginURL = 17503,
  SQMErrorCodeGisPollTimedOut = 17504,
  SQMErrorCodeGisRedirectMessageAbsent = 17103,
  SQMErrorCodeGisLoginURLAbsent = 17300,
  SQMErrorCodeGisLoginPollURLAbsent = 17301,
  SQMErrorCodeGisRedirectURLAbsent = 17302,
  SQMErrorCodeGisInheritPreviousLoginConnection = 17408,
  SQMErrorCodeDsInheritPreviousLoginConnection = 18408,
  SQMErrorCodeFhis2InheritPreviousLoginConnection = 27408,
  SQMErrorCodeCaptchaPollUrlAbsent = 17303,
  SQMErrorCodeGisUnexpectedResponseToLoginPost = 17304,
  SQMErrorCodeGisLogoutURLAbsent = 17305,
  SQMErrorCodeRedirectPageNotAvailable = 17402,
  SQMErrorCodeLoginFailedWithACACredentials = 17505,
  SQMErrorCodeLoginPostTimedOut = 17506,
  SQMErrorCodeLoginPostFailed = 17507,
  SQMErrorCodeGisRedirectEmptyPage = 17508,
  SQMErrorCodeDevicescapeUnexpectedError = 18001,
  SQMErrorCodeDevicescapeLoginSucceeded = 18050,
  SQMErrorCodeDevicescapeLoginFailed = 18100,
  SQMErrorCodeDevicescapeHttpTimeout = 18101,
  SQMErrorCodeDevicescapeDNSTimeout = 18102,
  SQMErrorCodeDevicescapeCredentialsRequired = 18103,
  SQMErrorCodeDevicescapeNotRegsitered = 18254,
  SQMErrorCodeDevicescapeNetworkError = 18255,
  SQMErrorCodeTransportWifiAssociationFailed = 19001,
  SQMErrorCodeTransportDHCPFailed = 17002,
  SQMErrorCodeTransportGenericHttpError = 17101,
  SQMErrorCodeTransportUnexpectedHttpError = 17510,
  SQMErrorCodeTransportHttpTimedOut = 17509,
  SQMErrorCodeReassociatedToAccessPoint = 19105,
  SQMErrorCodeAmionFailure = 19106,
  SQMErrorCodeAmionTimeOut = 19112,
  SQMErrorCodeTransportConnectionRefused = 17107,
  SQMErrorCodeHostErrorUnkown = 17108,
  SQMErrorCodeDynamicPasswordFailed = 19109,
  SQMErrorCodeOmInternalError = 19255,
  SQMErrorCodeCaptchaUnexpectedError = 20001,
  SQMErrorCodeCaptchaTimedOut = 20002,
  SQMErrorCodeCaptchaMaxAttemptsExceeded = 20003,
  SQMErrorCodeCaptchaPollUrlTimedOut = 20004,
  SQMErrorCodeX8021xAuthSuccess = 21050,
  SQMErrorCodeX8021xAuthenticationFailure = 21100,
  SQMErrorCodeX8021xCertValidationFailure = 21415,
  SQMErrorCodeX8021xCampusNwRootCANotFound = 21416,
  SQMErrorCodeX8021xCampusNwRootCAInvalid = 21417,
  SQMErrorCodeX8021xCampusNwRootCAOtherError = 21418,
  SQMErrorCodeX8021xCampusNwRootCAExpired = 21419,
  SQMErrorCodeFhisLoginSucceeded = 22000,
  SQMErrorCodeFhisUnknownCaptivePageType = 22002,
  SQMErrorCodeFhisAmIOnTestFailed = 22005,
  SQMErrorCodeFhisFailedUnknownError = 22009,
  SQMErrorCodeFhisLookUpTimedOut = 22010,
  SQMErrorCodeFhisWebViewLoadFailed = 22011,
  SQMErrorCodeFhisssidNotInFHISDBConnSuccess = 22100,
  SQMErrorCodeFhisssidNotInFHISDBConnFailed = 22101,
  SQMErrorCodeFhisRegexNotFoundConnSuccess = 22200,
  SQMErrorCodeFhisRegexFoundConnFailed = 22201,
  SQMErrorCodeFhisActionIdNotFoundConnSuccess = 22300,
  SQMErrorCodeFhisActionIdNotFoundConnFailed = 22301,
  SQMErrorCodeFhisDatabaseNotFoundConnSuccess = 22400,
  SQMErrorCodeFhisDatabaseNotFoundConnFailed = 22401,
  SQMErrorCodeFhisLoginSucceededWithBlobIDLookup = 27050,
  SQMErrorCodeFhisLoginSucceededWithSSIDLookup = 27051,
  SQMErrorCodeFhisLoginSucceededForOpenAccess = 27052,
  SQMErrorCodeFhisLoginFailedWithBlobID = 27100,
  SQMErrorCodeFhisLoginFailedWithSSID = 27101,
  SQMErrorCodeFhisLoginFailedWithTimeout = 27102,
  SQMErrorCodeFhisLoginFailedWithNoConfig = 27103,
  SQMErrorCodeFhisLoginFailedWithException = 27001,
  SQMErrorCodeNetworkConnectionLost = 23010,
  SQMErrorCodeSslFailure = 23420,
  SQMErrorCodeRtnServiceOutageInfo = 24001,
  SQMErrorCodeRtnServiceOutageAbortAttempt = 24002,
  SQMErrorCodeGisLoginFailedAmIONRetrySuccess = 917100,
  SQMErrorCodeGisRedirectMessageAbsentAmIONRetrySuccess = 917103,
  SQMErrorCodeGisInternalErrorAmIONRetrySuccess = 917255,
  SQMErrorCodeLoginFailedWithACACredentialsAmIONRetrySuccess = 917505,
  SQMErrorCodeTransportUnexpectedHttpErrorAmIONRetrySuccess = 919103,
  SQMErrorCodeGisNoGISTagsFoundAmIONRetrySuccess = 917501,
  SQMErrorCodeGisLoginTimedOutAmIONRetrySuccess = 917504,
  SQMErrorCodeInvalidLoginURLInGisAmIONRetrySuccess = 917507,
  SQMErrorCodeCaptchaTimedOutAmIONRetrySuccess = 920002,
  SQMErrorCodeFltLoginSucceeded = 26050,
  SQMErrorCodeFltAlreadyActivated = 26000,
  SQMErrorCodeFltInternalError = 26001,
  SQMErrorCodeFltAuthenticateTimeout = 26102,
  SQMErrorCodeFltInflightActivateDeviceUrlNotAvaialable = 26003,
  SQMErrorCodeFltInflightActivationStateURLNotAvailble = 26004,
  SQMErrorCodeFltInflightActivationError = 26005,
  SQMErrorCodeFltInflightCaptchaFailed = 26006,
  SQMErrorCodeFltInflightCaptchaTimeout = 26007,
  SQMErrorCodeFltInflightDeviceUnsupported = 26009,
  SQMErrorCodeFltInheritPreviousLoginConnection = 26408,
  SQMErrorCodeFltInflightProtocolError = 26010,
  SQMErrorCodeFlt2InvalidSessionID = 26011,
  SQMErrorCodeFlt2InflightCaptchaFailed = 26012,
  SQMErrorCodeLoginFailedDueToWiFiAssist = 17111,
};


SWIFT_CLASS("_TtC17iPassSmartConnect24SQMFHISDiagRecordCreator") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SQMFHISDiagRecordCreator : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17iPassSmartConnect22SQMFPDiagRecordCreator") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SQMFPDiagRecordCreator : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17iPassSmartConnect24SQMHomeCountryDiagRecord")
@interface SQMHomeCountryDiagRecord : SQMDiagRecord
- (NSString * _Nonnull)getAsXmlString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("SQMISEELDiagRecordCreator") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SQMISEELDiagRecordCreator : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_PROTOCOL_NAMED("SpeedTestDelegate")
@protocol SpeedTestDelegate
@optional
- (void)willStartLatency;
- (void)didFinishLatency:(double)latency :(double)packetLoss;
- (void)willStartDownload;
- (void)downloadSpeed:(NSInteger)interval;
- (void)downloadProgress:(float)percentage;
- (void)didFinishDownload:(NSInteger)downloadSpeed;
- (void)willStartUpload;
- (void)uploadSpeed:(NSInteger)interval;
- (void)uploadProgress:(float)percentage;
- (void)didFinshUpload:(NSInteger)uploadSpeed;
- (void)speedTestFailed:(SMCSpeedTestError * _Nonnull)errorObject;
- (void)didFinishTest:(SMCSpeedTestResults * _Nonnull)successObject;
- (void)didFinishSpeedTest:(SMCSpeedTestCompletionInfo * _Nonnull)successObject;
@end


SWIFT_CLASS("_TtC17iPassSmartConnect15SpeedTestHelper") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SpeedTestHelper : NSObject
+ (NSInteger)getUptimeInMilliseconds SWIFT_WARN_UNUSED_RESULT;
+ (NSURL * _Nullable)smartURLForString:(NSString * _Nonnull)stringVal SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)pathForSpeedTestDir SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=9.0);
@end








SWIFT_CLASS_NAMED("URLActivationParams")
@interface URLActivationParams : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Model class for holding a usage record information
SWIFT_CLASS("_TtC17iPassSmartConnect11UsageRecord")
@interface UsageRecord : RealmSwiftObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17iPassSmartConnect12UsageSummary")
@interface UsageSummary : NSObject
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull periodBytes;
@property (nonatomic, readonly, copy) NSArray<NSDate *> * _Nonnull periodDates;
@property (nonatomic, readonly) NSInteger totalBytes;
@property (nonatomic, readonly) NSInteger maxBytes;
@property (nonatomic, readonly) NSInteger maxPeriod;
@property (nonatomic, readonly) NSInteger minBytes;
@property (nonatomic, readonly) NSInteger minPeroid;
@property (nonatomic, readonly) NSInteger minNonZeroBytes;
@property (nonatomic, readonly) NSInteger minNonZeroPeriod;
@property (nonatomic, readonly) NSInteger averageBytes;
- (nonnull instancetype)initWithCalenderUnit:(NSCalendarUnit)calenderUnit periodDates:(NSArray<NSDate *> * _Nonnull)periodDates periodBytes:(NSArray<NSNumber *> * _Nonnull)periodBytes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17iPassSmartConnect12UserExcludes")
@interface UserExcludes : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UserExcludes * _Nonnull shared;)
+ (UserExcludes * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(UserExcludes * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (NSArray * _Nonnull)getExcludeList SWIFT_WARN_UNUSED_RESULT;
- (void)addWithNetworks:(NSArray<NSString *> * _Nonnull)networks;
/// Returns true if the given network is user excluded, false otehrwise.
/// -parameter ssid: The ssid to check if it’s user excluded or not.
- (BOOL)isUserExcluded:(NSString * _Nonnull)ssid SWIFT_WARN_UNUSED_RESULT;
- (void)removeWithNetworks:(NSArray<NSString *> * _Nonnull)networks;
- (void)updateRecentlyScannedListWithSSIDs:(NSArray * _Nonnull)ssids;
@end


/// Needs to be implemented by the client using the framework,
/// so the user specific settings can be accessed
SWIFT_PROTOCOL_NAMED("UserSettings")
@protocol UserSettings
- (BOOL)getBoolForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)setBool:(BOOL)bool_ forKey:(NSString * _Nonnull)key;
- (NSInteger)getIntegerForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)setInteger:(NSInteger)integer forKey:(NSString * _Nonnull)key;
- (id _Nullable)getObjectForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)setObject:(id _Nonnull)object forKey:(NSString * _Nonnull)key;
@end


SWIFT_CLASS_NAMED("WiFiEntryDetails") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface WiFiEntryDetails : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=9.0);
@end


SWIFT_CLASS_NAMED("WiFiEntryInfo") SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface WiFiEntryInfo : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=9.0);
@end


SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface WiFiEntryInfo (SWIFT_EXTENSION(iPassSmartConnect))
@property (nonatomic, copy) NSString * _Nullable Certificate_Issued_By;
@property (nonatomic, strong) NSNumber * _Nullable wildCardEnabled;
@property (nonatomic, copy) NSString * _Nullable localContentURL;
@property (nonatomic, copy) NSString * _Nullable KeyValue;
@property (nonatomic, strong) NSNumber * _Nullable KeyFormat;
@property (nonatomic, strong) NSNumber * _Nullable Security;
@property (nonatomic, copy) NSString * _Nullable ssid;
@property (nonatomic, copy) NSString * _Nullable AuthenticationMethod;
@property (nonatomic, copy) NSString * _Nullable authMethodProfileName;
@property (nonatomic, strong) NSNumber * _Nullable ISEELEnabled;
@property (nonatomic, strong) NSNumber * _Nullable Media;
@property (nonatomic, copy) NSString * _Nullable inpr;
@property (nonatomic, copy) NSString * _Nullable supportedSuffixList;
@property (nonatomic, copy) NSString * _Nullable Prefix;
@property (nonatomic, copy) NSString * _Nullable commonRateSelector;
@property (nonatomic, strong) NSNumber * _Nullable Broadcast;
@property (nonatomic, copy) NSString * _Nullable DirectoryID;
@property (nonatomic, copy) NSString * _Nullable Directory_Account;
@property (nonatomic, strong) NSNumber * _Nullable Directory_Priority;
@property (nonatomic, copy) NSString * _Nullable supportedPrefixList;
@property (nonatomic, copy) NSString * _Nullable Certificate_Issued_To;
@property (nonatomic, copy) NSString * _Nullable wildCardPatternStringList;
@property (nonatomic, copy) NSString * _Nullable Suffix;
@property (nonatomic, copy) NSString * _Nullable ssidWithWildCardChar;
@property (nonatomic, copy) NSString * _Nullable useGatewayReturnedURL;
@end


SWIFT_CLASS_NAMED("WildCardWiFiEntryInfo")
@interface WildCardWiFiEntryInfo : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface WildCardWiFiEntryInfo (SWIFT_EXTENSION(iPassSmartConnect))
@property (nonatomic, copy) NSString * _Nullable Certificate_Issued_By;
@property (nonatomic, strong) NSNumber * _Nullable wildCardEnabled;
@property (nonatomic, copy) NSString * _Nullable localContentURL;
@property (nonatomic, copy) NSString * _Nullable KeyValue;
@property (nonatomic, strong) NSNumber * _Nullable KeyFormat;
@property (nonatomic, strong) NSNumber * _Nullable Security;
@property (nonatomic, copy) NSString * _Nullable ssid;
@property (nonatomic, copy) NSString * _Nullable AuthenticationMethod;
@property (nonatomic, strong) NSNumber * _Nullable Media;
@property (nonatomic, copy) NSString * _Nullable inpr;
@property (nonatomic, strong) NSNumber * _Nullable ISEELEnabled;
@property (nonatomic, strong) NSNumber * _Nullable Broadcast;
@property (nonatomic, copy) NSString * _Nullable Prefix;
@property (nonatomic, copy) NSString * _Nullable supportedSuffixList;
@property (nonatomic, copy) NSString * _Nullable commonRateSelector;
@property (nonatomic, copy) NSString * _Nullable DirectoryID;
@property (nonatomic, copy) NSString * _Nullable Directory_Account;
@property (nonatomic, strong) NSNumber * _Nullable Directory_Priority;
@property (nonatomic, copy) NSString * _Nullable supportedPrefixList;
@property (nonatomic, copy) NSString * _Nullable Certificate_Issued_To;
@property (nonatomic, copy) NSString * _Nullable wildCardPatternStringList;
@property (nonatomic, copy) NSString * _Nullable Suffix;
@property (nonatomic, copy) NSString * _Nullable ssidWithWildCardChar;
@property (nonatomic, copy) NSString * _Nullable useGatewayReturnedURL;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
